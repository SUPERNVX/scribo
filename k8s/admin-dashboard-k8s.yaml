apiVersion: v1
kind: Secret
metadata:
  name: scribo-admin-secret
  namespace: scribo
  labels:
    app: scribo
    component: admin-dashboard
type: Opaque
data:
  # Base64 encoded: echo -n "sua_senha_super_segura_aqui" | base64
  admin-password: c3VhX3NlbmhhX3N1cGVyX3NlZ3VyYV9hcXVp
  # Base64 encoded: echo -n "scribo_k8s_admin_2024_ultra_secure" | base64
  admin-token: c2NyaWJvX2s4c19hZG1pbl8yMDI0X3VsdHJhX3NlY3VyZQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scribo-admin-config
  namespace: scribo
  labels:
    app: scribo
    component: admin-dashboard
data:
  dashboard-config.py: |
    # Configurações específicas para Kubernetes
    import os
    
    # Token de admin do secret
    ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "scribo_k8s_admin_2024_ultra_secure")
    
    # Configurações de rede
    HOST = "0.0.0.0"
    PORT = 8001
    
    # Configurações de segurança
    ALLOWED_ORIGINS = [
        "https://admin.scribo.com",
        "https://dashboard.scribo.com",
        "http://localhost:8001"
    ]
    
    # Configurações de banco
    DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///app/data/database.db")
    
    # Configurações de logs
    LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
    LOG_FILE = "/app/logs/admin-dashboard.log"
    
    print(f"Dashboard configurado para Kubernetes")
    print(f"Host: {HOST}:{PORT}")
    print(f"Token configurado: {'✅' if ADMIN_TOKEN else '❌'}")
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scribo-admin-dashboard
  namespace: scribo
  labels:
    app: scribo
    component: admin-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scribo
      component: admin-dashboard
  template:
    metadata:
      labels:
        app: scribo
        component: admin-dashboard
    spec:
      containers:
      - name: admin-dashboard
        image: scribo-admin:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
        env:
        - name: ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: scribo-admin-secret
              key: admin-token
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: scribo-secrets
              key: database-url
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "kubernetes"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: admin-logs
          mountPath: /app/logs
        - name: admin-config
          mountPath: /app/config
        - name: database-storage
          mountPath: /app/data
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: admin-logs
        persistentVolumeClaim:
          claimName: scribo-admin-logs-pvc
      - name: admin-config
        configMap:
          name: scribo-admin-config
      - name: database-storage
        persistentVolumeClaim:
          claimName: scribo-database-pvc
      # Tolerations para executar em qualquer node
      tolerations:
      - operator: Exists
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: scribo-admin-dashboard-service
  namespace: scribo
  labels:
    app: scribo
    component: admin-dashboard
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: scribo
    component: admin-dashboard
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: scribo-admin-dashboard-ingress
  namespace: scribo
  labels:
    app: scribo
    component: admin-dashboard
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Autenticação básica adicional (opcional)
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: scribo-admin-auth
    nginx.ingress.kubernetes.io/auth-realm: "Scribo Admin Dashboard"
spec:
  tls:
  - hosts:
    - admin.scribo.com
    secretName: scribo-admin-tls
  rules:
  - host: admin.scribo.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: scribo-admin-dashboard-service
            port:
              number: 8001
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: scribo-admin-logs-pvc
  namespace: scribo
  labels:
    app: scribo
    component: admin-dashboard
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: scribo-database-pvc
  namespace: scribo
  labels:
    app: scribo
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
# Autenticação básica adicional (opcional)
apiVersion: v1
kind: Secret
metadata:
  name: scribo-admin-auth
  namespace: scribo
  labels:
    app: scribo
    component: admin-dashboard
type: Opaque
data:
  # htpasswd -nb admin sua_senha_aqui | base64
  # Usuário: admin, Senha: AdminScribo2024!
  auth: YWRtaW46JGFwcjEkSDZ1ek5wNzIkSjNLWHZiOGlQNXVHLnpIZ3VCcUVnMQo=