name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: scribo_test
          POSTGRES_USER: scribo_user
          POSTGRES_PASSWORD: scribo_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt', 'backend/test_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://scribo_user:scribo_password@localhost:5432/scribo_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key" >> $GITHUB_ENV

    - name: Initialize test database
      working-directory: ./backend
      run: |
        PGPASSWORD=scribo_password psql -h localhost -U scribo_user -d scribo_test -f init.sql

    - name: Run linting
      working-directory: ./backend
      run: |
        # Install linting tools
        pip install flake8 black isort mypy
        
        # Run black formatting check
        black --check --diff .
        
        # Run isort import sorting check
        isort --check-only --diff .
        
        # Run flake8 linting
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        # Run mypy type checking (allow failures for now)
        mypy . --ignore-missing-imports || true

    - name: Run tests
      working-directory: ./backend
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security scanning tools
      run: |
        pip install safety bandit

    - name: Run safety check
      working-directory: ./backend
      run: |
        safety check -r requirements.txt

    - name: Run bandit security scan
      working-directory: ./backend
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

  build-docker:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      working-directory: ./backend
      run: |
        docker build -t scribo-backend:latest .

    - name: Test Docker image
      run: |
        # Start the container in background
        docker run -d --name test-backend -p 8000:8000 \
          -e DATABASE_URL=sqlite:///test.db \
          -e REDIS_URL=redis://localhost:6379 \
          scribo-backend:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint (if it exists)
        curl -f http://localhost:8000/api/ || echo "API test completed"
        
        # Clean up
        docker stop test-backend
        docker rm test-backend

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here
        # This could include:
        # - Building and pushing Docker image to registry
        # - Deploying to staging server
        # - Running smoke tests
        echo "Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment steps here
        # This could include:
        # - Building and pushing Docker image to registry
        # - Deploying to production server
        # - Running smoke tests
        # - Notifying team
        echo "Production deployment completed"